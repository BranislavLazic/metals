<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Metals</title>
    <link>http://scalameta.org/metals/</link>
    <description>Recent content on Metals</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 08 Mar 2016 21:07:13 +0100</lastBuildDate>
    
	<atom:link href="http://scalameta.org/metals/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Installation</title>
      <link>http://scalameta.org/metals/contributors/installation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://scalameta.org/metals/contributors/installation/</guid>
      <description>Warning
This project is very alpha stage. Expect bugs and incomplete documentation.
 The following instructions are intended for contributors who want to try Metals and provide feedback. We do not provide support for day-to-day usage of Metals.
Global setup These steps are required once per machine.
sbt plugin The server needs to access some metadata about the build configuration. This data are produced by an sbt plugin.
You can install the plugin with (replace &amp;lt;version&amp;gt; with the latest available version)</description>
    </item>
    
    <item>
      <title>Installation</title>
      <link>http://scalameta.org/metals/users/installation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://scalameta.org/metals/users/installation/</guid>
      <description>Sorry, nothing to see here Metals is still under active development and it&amp;rsquo;s not intended for general use.
If you want to contribute to the project, head over to the documentation for contributors.</description>
    </item>
    
    <item>
      <title>Integrating a new build tool</title>
      <link>http://scalameta.org/metals/contributors/new-build-tool/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://scalameta.org/metals/contributors/new-build-tool/</guid>
      <description>Metals currently supports only sbt through the sbt-metals plugins and metalsSetup task. However, metals does not require sbt and can be integrated with other build tools.
The long-term strategy to integrate metals with build tools is to support some standard LSP-inspired protocol. An example of how such a protocol might look like is the draft for a potential &amp;ldquo;Build Server Protocol&amp;rdquo;. Until such a protocol becomes more standard, metals can import build metadata through a custom property file format.</description>
    </item>
    
    <item>
      <title>Integrating a new editor</title>
      <link>http://scalameta.org/metals/contributors/new-editor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://scalameta.org/metals/contributors/new-editor/</guid>
      <description>Before writing a new editor client, first check if someone else has managed to integrate metals with your favorite text editor.
 Visual Studio Code, maintained in this repo Atom, maintained by @laughedelic Emacs, maintained by @rossabaker Others, see #217. Please open an issue or ask on gitter if you want to create a new editor client.  To integrate metals with a new editor, a few things should be kept in mind</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>http://scalameta.org/metals/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://scalameta.org/metals/overview/</guid>
      <description>This document is an overview of the Metals project. Metals is a community driven project with no official funding or dedicated resources.
 Simple installation: importing a project should be simple and require as few steps as possible. Correct diagnostics: the editor should not show spurious red squiggles, even at the cost of higher latency. Robust navigation: goto definition should work everywhere, even for Java dependencies. Fast completions: completions suggestions should respond in ~200ms, even at the cost of occasionally wrong results.</description>
    </item>
    
  </channel>
</rss>